<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
* 콘테스트 Mybatis mapper xml
* @author 정은찬
* @since 2024.08.31
* @version 1.0
*
* <pre>
* 수정일        	수정자        수정내용
* ==========  =========    ======================================================
* 2024.08.31  	정은찬        최초 생성
* 2024.09.01  	정은찬        콘테스트 게시글 목록 조회 query parameter 적용, 게시글 상세 조회, 게시글 아이템 조회 추가
* </pre>
-->

<mapper namespace="com.oasis.hworld.contest.mapper.ContestMapper">
    <!-- 콘테스트 게시글 목록 조회 -->
    <select id="selectContestPostList">
        SELECT
            P.post_id,
            CO.image_url,
            P.like_count,
            COUNT(R.reply_id) AS reply_count
        FROM
            POST P
        LEFT JOIN
            CONTEST C
            ON
                P.contest_id = C.contest_id
        LEFT JOIN
            MEMBER M
            ON
                P.member_id = M.member_id
        LEFT JOIN
            COORDINATION CO
            ON
                P.coordination_id = CO.coordination_id
        LEFT JOIN
            REPLY R
            ON
                P.post_id = R.post_id
        WHERE
            <if test="contestStatus == 'ongoing'">
                TO_DATE(#{date}, 'YYYY-MM-DD') BETWEEN C.start_date AND C.end_date
            </if>
            <if test="contestStatus == 'finished'">
                C.end_date &lt; TO_DATE(#{date}, 'YYYY-MM-DD')
            </if>
        GROUP BY
            P.post_id,
            CO.image_url,
            P.like_count
        <choose>
            <when test="sortBy == 'latest'">
                ORDER BY MAX(P.created_at) DESC
            </when>
            <when test="sortBy == 'recommend'">
                ORDER BY P.like_count DESC
            </when>
        </choose>
    </select>

    <!-- 게시글 ID를 통해 게시글 상세 조회 -->
    <select id="selectContestPostDetailByPostId">
        SELECT
            P.post_id,
            P.title,
            TO_CHAR(P.created_at, 'YYYY-MM-DD') AS created_at,
            CO.image_url,
            M.nickname,
            P.like_count
        FROM
            POST P
        LEFT JOIN
            MEMBER M
            ON
                P.member_id = M.member_id
        LEFT JOIN
            COORDINATION CO
            ON
                P.coordination_id = CO.coordination_id
        WHERE
            P.post_id = #{postId}
    </select>

    <!-- 게시글 ID를 통해 댓글 조회 -->
    <select id="selectReplyListByPostId">
        SELECT M.nickname, R.content, TO_CHAR(R.created_at, 'YYYY-MM-DD') AS created_at
        FROM
            REPLY R
        LEFT JOIN
            MEMBER M
            ON
                R.member_id = M.member_id
        WHERE
            R.post_id = #{postId}
        ORDER BY
            R.created_at DESC
    </select>

    <!-- 게시글 ID를 통해 아이템 조회 -->
    <select id="selectItemsByPostId">
        SELECT
            CO.glasses_id,
            G.name AS glasses_name,
            GS.name AS glasses_shop_name,
            G.image_url AS glasses_image_url,
            CO.cap_id,
            CAP.name AS cap_name,
            CS.name AS cap_name,
            CAP.image_url AS cap_image_url,
            CO.bag_id,
            B.name AS bag_name,
            BS.name AS bag_shop_name,
            B.image_url AS bag_image_url,
            CO.necklace_id,
            N.name AS necklace_name,
            NS.name AS necklace_shop_name,
            N.image_url AS necklace_image_url
        FROM
            POST P
        LEFT JOIN
            COORDINATION CO
            ON
                P.coordination_id = CO.coordination_id
        LEFT JOIN
            ITEM G
            ON
                CO.glasses_id = G.item_id
        LEFT JOIN
            SHOP GS
            ON
                G.shop_id = GS.shop_id
        LEFT JOIN
            ITEM CAP
            ON
                CO.cap_id = CAP.item_id
        LEFT JOIN
            SHOP CS
            ON
                CAP.shop_id = CS.shop_id
        LEFT JOIN
            ITEM B
            ON
                CO.bag_id = B.item_id
        LEFT JOIN
            SHOP BS
            ON
                B.shop_id = BS.shop_id
        LEFT JOIN
            ITEM N
            ON
                CO.necklace_id = N.item_id
        LEFT JOIN
            SHOP NS
            ON
                N.shop_id = NS.shop_id
        WHERE
            P.post_id = #{postId}
    </select>
</mapper>